++======================================++
|| Akutenshi Converter Config (.akconv) ||
++======================================++

{
	"type": <ENUM["GLTF", "TEXTURE"]>,                                           // The type of file to convert from

	(Section:["type":"GLTF"])		
		"source": <STR>,                                                         // The file to convert, relative to this file
		(Gen, Opt[min(INT)]) "modifiedTime": <INT>,                              // The last modified date of the file, in unix time. Used to identify modifications.

		(Opt]) "meshes":{                                                        // Map of mesh names to destination (Path/SUID)
			(Opt) <STR>: {                                                       // Mesh name
				(Opt) "identifier": <SUID>,                                      // SUID of asset
				(Opt) "destination": <STR>                                       // Destination of asset .akres file.
			},
			[...]
		},
		
		(Opt) "materials":{                                                      // Map of material names to destination (Path/SUID)
			(Opt) <STR>: {                                                       // Material name
				(Opt) "identifier": <SUID>,                                      // SUID of asset
				(Opt) "destination": <STR>                                       // Destination of asset .akres file.
			},			
			[...]
		},
		
		(Opt) "images":{                                                         // Map of image names to destination (Path/SUID)
			(Opt) <STR>: {                                                       // Image name
				(Opt) "identifier": <SUID>,                                      // SUID of asset
				(Opt) "destination": <STR>                                       // Destination of asset .akres file.
			},			
			[...]
		},
		
	(Section:["type":"TEXTURE"])
		"config": {
			"type": <ENUM["Tex1D", "Tex2D", "Tex3D", "Tex1D_Array", "Tex2D_Array", "TexCubemap"]>,
			"levels":[
				[
					{
						(Opt["source"])_"identifier": <SUID>,                                 // Asset ID of image
						(Opt["identifier"]) "source": <STR>                                   // Source akconv file of image
						(Opt["None"]) "rotate": <ENUM["None","Right", "Upsidedown", "Left"]>, // Rotates after offset/cropping
						(Opt[0]) "layer":<INT>,                                               // Used in 1D textures/1D arrays
						(Opt[0]) "offsetX":<INT>,                                             // Image wraps around
						(Opt[0]) "offsetY":<INT>,                                             // Image wraps around
						(Opt[0]) "cropX":<INT>,                                               // Negative values flip, 0 = image size
						(Opt[0]) "cropY":<INT>                                                // Negative values flip, 0 = image size
					},
					...
				],
				...
			],
			(Opt["Edge"]) "clampHorz":  <ENUM["Edge", "Border", "Wrap", "Mirror"],
			(Opt["Edge"]) "clampVert":  <ENUM["Edge", "Border", "Wrap", "Mirror"],
			(Opt["Edge"]) "clampDepth": <ENUM["Edge", "Border", "Wrap", "Mirror"],
			
			(Opt["Nearest"]) "filterMin": <ENUM["Nearest", "Linear"]>,
			(Opt["Nearest"]) "filterMax": <ENUM["Nearest", "Linear"]>,
			(Opt["None"])"filterMip": <ENUM["None", "Nearest", "Linear"]>,
		}
}

++=============================++
|| Akutenshi Resource (.akres) ||
++=============================++

{
	"identifier": <SUID>,                                                                    // SUID of file
	"type": <ENUM["Animation", "Material", "Mesh", "Prefab", "Scene", "Sound", "Texture"]>,  // The type of data the file contains
	"displayName: <STR>                                                                      // The display name of the file
}

++============================++
|| Akutenshi Texture (.aktex) ||
++============================++

{
	"type": <ENUM["Tex1D", "Tex2D", "Tex3D", "Tex1D_Array", "Tex2D_Array", "TexCubemap"]>,
	"levels":[
		[
			{
				"identifier": <SUID>,                                                 // Asset ID of image
				(Opt["None"]) "rotate": <ENUM["None","Right", "Upsidedown", "Left"]>, // Rotates after offset/cropping
				(Opt[0]) "layer":<INT>,                                               // Used in 1D textures/1D arrays
				(Opt[0]) "offsetX":<INT>,                                             // Image wraps around
				(Opt[0]) "offsetY":<INT>,                                             // Image wraps around
				(Opt[0]) "cropX":<INT>,                                               // Negative values flip, 0 = image size
				(Opt[0]) "cropY":<INT>                                                // Negative values flip, 0 = image size
			},
			...
		],
		...
	],
	(Opt["Edge"]) "clampHorz":  <ENUM["Edge", "Border", "Wrap", "Mirror"],
	(Opt["Edge"]) "clampVert":  <ENUM["Edge", "Border", "Wrap", "Mirror"],
	(Opt["Edge"]) "clampDepth": <ENUM["Edge", "Border", "Wrap", "Mirror"],
	
	(Opt["Nearest"]) "filterMin": <ENUM["Nearest", "Linear"]>,
	(Opt["Nearest"]) "filterMax": <ENUM["Nearest", "Linear"]>,
	(Opt["None"])"filterMip": <ENUM["None", "Nearest", "Linear"]>,
	
}